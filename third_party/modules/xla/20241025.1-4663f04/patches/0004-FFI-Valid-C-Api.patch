diff --git a/xla/ffi/api/c_api.h b/xla/ffi/api/c_api.h
index f0c4f40e78..7fdda0a52d 100644
--- a/xla/ffi/api/c_api.h
+++ b/xla/ffi/api/c_api.h
@@ -255,30 +255,30 @@ typedef struct XLA_FFI_ExecutionContext XLA_FFI_ExecutionContext;
 //===----------------------------------------------------------------------===//
 
 // TypeId uniquely identifies a user-defined type in a given XLA FFI instance.
-struct XLA_FFI_TypeId {
+typedef struct XLA_FFI_TypeId {
   int64_t type_id;
-};
+} XLA_FFI_TypeId;
 
 // We use byte spans to pass strings to handlers because strings might not be
 // null terminated, and even if they are, looking for a null terminator can
 // become very expensive in tight loops.
-struct XLA_FFI_ByteSpan {
+typedef struct XLA_FFI_ByteSpan {
   const char* ptr;
   size_t len;
-};
+} XLA_FFI_ByteSpan;
 
 // A struct to pass a scalar value to FFI handler.
-struct XLA_FFI_Scalar {
+typedef struct XLA_FFI_Scalar {
   XLA_FFI_DataType dtype;
   void* value;
-};
+} XLA_FFI_Scalar;
 
 // A struct to pass a dense array to FFI handler.
-struct XLA_FFI_Array {
+typedef struct XLA_FFI_Array {
   XLA_FFI_DataType dtype;
   size_t size;
   void* data;
-};
+} XLA_FFI_Array;
 
 //===----------------------------------------------------------------------===//
 // Future
@@ -431,12 +431,12 @@ XLA_FFI_DEFINE_STRUCT_TRAITS(XLA_FFI_CallFrame, attrs);
 typedef XLA_FFI_Error* XLA_FFI_Handler(XLA_FFI_CallFrame* call_frame);
 
 // XLA FFI handlers for execution stages (see XLA_FFI_ExecutionStage).
-struct XLA_FFI_Handler_Bundle {
+typedef struct XLA_FFI_Handler_Bundle {
   XLA_FFI_Handler* instantiate;  // optional
   XLA_FFI_Handler* prepare;      // optional
   XLA_FFI_Handler* initialize;   // optional
   XLA_FFI_Handler* execute;      // required
-};
+} XLA_FFI_Handler_Bundle;
 
 enum XLA_FFI_Handler_TraitsBits {
   // Calls to FFI handler are safe to trace into the command buffer. It means
